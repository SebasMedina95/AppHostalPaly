# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageMetaInput {
  page: Int!
  take: Int!
  itemCount: Int!
  pageCount: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Comfort {
  """Id autoincrementado para la PK"""
  id: ID!

  """Nombre de la comodidad"""
  name: String!

  """Descripción de la comodidad"""
  description: String!

  """Estado de la comodidad"""
  status: Boolean!

  """Email del usuario que registra"""
  userCreateAt: String!

  """Fecha de Registro"""
  createDateAt: DateTime!

  """Email del usuario que actualiza"""
  userUpdateAt: String!

  """Fecha de Actuaización"""
  updateDateAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  """Id autoincrementado para la PK"""
  id: ID!

  """Nombres del usuario"""
  names: String!

  """Apellidos del usuario"""
  lastnames: String!

  """Email del usuario"""
  email: String!

  """Email validado del usuario"""
  emailValidated: Boolean!

  """Roles del usuario"""
  roles: [String!]!

  """Sexo del usuario"""
  gender: String!

  """Avatar del usuario"""
  img: String

  """Teléfono 1 del usuario"""
  phone1: String

  """Teléfono 2 del usuario"""
  phone2: String

  """Estado del usuario"""
  isBlock: Boolean!

  """Email de usuario que bloqueó"""
  userWhoBlock: String

  """Contraseña Recuperación"""
  passwordRecovery: String
}

type ComfortPaginationResponse {
  data: [Comfort!]!
  meta: PageMetaInput!
}

type AuthResponse {
  user: User!
  token: String!
}

type UserPaginationResponse {
  data: [User!]!
  meta: PageMetaInput!
}

type Category {
  """Id autoincrementado para la PK"""
  id: ID!

  """Nombre de la categoría"""
  name: String!

  """Descripción de la categoría"""
  description: String!

  """Temática de la categoría"""
  theme: String!

  """Estado de la categoría"""
  status: Boolean!

  """Cantidad de Reservaciones - Popularidad"""
  populate: Int!

  """Email del usuario que registra"""
  userCreateAt: String!

  """Fecha de Registro"""
  createDateAt: DateTime!

  """Email del usuario que actualiza"""
  userUpdateAt: String!

  """Fecha de Actuaización"""
  updateDateAt: DateTime!
}

type ComfortsForCategory {
  """Id autoincrementado para la PK"""
  id: ID!

  """Id de la categoría"""
  categoryId: Int!

  """Id de la comodidad"""
  comfortId: Int!

  """Email del usuario que registra"""
  userCreateAt: String!

  """Fecha de Registro"""
  createDateAt: DateTime!
}

type BuildListResponse {
  getCategories: Category!
  arrayComforts: [Comfort!]!
}

type CategoryPaginationResponse {
  data: [BuildListResponse!]!
  meta: PageMetaInput!
}

type CategoryResponse {
  category: Category!
  comfortsList: [ComfortsForCategory!]!
}

type CategoryResponseWithComforts {
  category: Category!
  comfortsList: [Comfort!]!
}

type Room {
  """Id autoincrementado para la PK"""
  id: ID!

  """Id de la categoría"""
  categoryId: Int!

  """Nombre de la habitación"""
  name: String!

  """Se encuentra en mantenimiento"""
  maintenance: Boolean!

  """Descripciones de la habitación"""
  description: String

  """Estado de la habitación"""
  status: Boolean!

  """Email del usuario que registra"""
  userCreateAt: String!

  """Fecha de Registro"""
  createDateAt: DateTime!

  """Email del usuario que actualiza"""
  userUpdateAt: String!

  """Fecha de Actuaización"""
  updateDateAt: DateTime!
  category: Category
}

type RoomResponse {
  room: Room!
  categoryResponse: CategoryResponseWithComforts!
}

type RoomPaginationResponse {
  data: [Room!]!
  meta: PageMetaInput!
}

type Query {
  """Método inicial para las configuraciones GraphQL"""
  hello: String!

  """Generación de número aleatorio"""
  randomNumber: Float!

  """Retornar el arreglo de valores pares a partir de un número dado"""
  generateArrayPairs(value: Int): [Int!]!

  """Listar comodidades con paginación y filtro"""
  findAllComforts(pageOptionsArgs: PageOptionsArgs!): ComfortPaginationResponse!

  """Obtener comodidad por ID"""
  findOneComfort(id: Int!): Comfort!

  """Revalidar el Token"""
  revalidate: AuthResponse!

  """Listar todos los usuarios con filtro y paginación"""
  findAllUsers(pageOptionsArgs: PageOptionsArgs!): UserPaginationResponse!

  """Listar categorías con paginación y filtro"""
  findAllCategories(pageOptionsArgs: PageOptionsArgs!): CategoryPaginationResponse!

  """Obtener categoría por ID"""
  findOneCategory(id: Int!): CategoryResponseWithComforts!

  """Listar habitaciones con paginación y filtro"""
  findAllRooms(pageOptionsArgs: PageOptionsArgs!): RoomPaginationResponse!

  """Obtener una habitación por ID"""
  findOneRoom(id: Int!): Room!

  """Obtener habitaciones por categoría"""
  findRoomsByCategory(id: Int!): [Room!]!
}

input PageOptionsArgs {
  order: String! = "asc"
  page: Int! = 1
  take: Int! = 10
  search: String! = ""
}

type Mutation {
  """Crear una nueva comodidad"""
  createComfort(createComfortInput: CreateComfortInput!): Comfort!

  """Actualizar una comodidad"""
  updateComfort(updateComfortInput: UpdateComfortInput!): Comfort!

  """Eliminar lógicamente una comodidad"""
  removeComfort(id: Int!): Comfort!

  """Registrarse en el sistema"""
  signup(signupInput: SignupInput!): AuthResponse!

  """Actualizar información básica del usuario"""
  updateUserFromLogin(updateAuthInput: UpdateAuthInput!): User!

  """Actualizar la contraseña"""
  updateUserPasswordFromLogin(updatePasswordInput: UpdatePasswordInput!): User!
  recoveryPasswordFromLogin(emailRecovery: String!): User!

  """Acceder al sistema"""
  login(loginInput: LoginInput!): AuthResponse!

  """Bloquear un usuario"""
  blockUser(id: Int!): User!

  """Crear una nueva categoría"""
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryResponse!

  """Actualizar una categoría"""
  updateCategory(updateCategoryInput: UpdateCategoryInput!): CategoryResponse!

  """Eliminar lógicamente una categoría"""
  removeCategory(id: Int!): Category!

  """Crear una habitación"""
  createRoom(createRoomInput: CreateRoomInput!): RoomResponse!

  """Actualizar una habitación"""
  updateRoom(updateRoomInput: UpdateRoomInput!): Room!

  """Eliminar una habitación"""
  removeRoom(id: Int!): Room!
}

input CreateComfortInput {
  name: String!
  description: String!
  status: Boolean
  userCreateAt: String
  createDateAt: DateTime
  userUpdateAt: String
  updateDateAt: DateTime
}

input UpdateComfortInput {
  name: String
  description: String
  status: Boolean
  userCreateAt: String
  createDateAt: DateTime
  userUpdateAt: String
  updateDateAt: DateTime
  id: Int!
}

input SignupInput {
  names: String!
  lastnames: String!
  email: String!
  password: String!
  passwordConfirm: String!
  gender: String!
  img: String
  phone1: String
  phone2: String
  isBlock: Boolean
}

input UpdateAuthInput {
  id: Int!
  names: String
  lastnames: String
  gender: String
  phone1: String
  phone2: String
}

input UpdatePasswordInput {
  id: Int!
  currentPassword: String!
  newPassword: String!
  confirmPassword: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateCategoryInput {
  name: String!
  description: String!
  theme: String!
  status: Boolean
  populate: Int
  userCreateAt: String
  createDateAt: DateTime
  userUpdateAt: String
  updateDateAt: DateTime
  comfortsList: [Int!]
}

input UpdateCategoryInput {
  name: String
  description: String
  theme: String
  status: Boolean
  populate: Int
  userCreateAt: String
  createDateAt: DateTime
  userUpdateAt: String
  updateDateAt: DateTime
  comfortsList: [Int!]
  id: Int!
}

input CreateRoomInput {
  categoryId: Int!
  name: String!
  maintenance: Boolean
  description: String
  userCreateAt: String
  createDateAt: DateTime
  userUpdateAt: String
  updateDateAt: DateTime
}

input UpdateRoomInput {
  categoryId: Int
  name: String
  maintenance: Boolean
  description: String
  userCreateAt: String
  createDateAt: DateTime
  userUpdateAt: String
  updateDateAt: DateTime
  id: Int!
}